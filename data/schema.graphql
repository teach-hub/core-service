schema {
  query: RootQueryType
  mutation: RootMutationType
}

input AssignReviewersInputType {
  """ID of the assignment where assign the reviewers to."""
  assignmentId: ID!
  reviewers: [ReviewersAssignmentInputType!]!
}

type AssignmentType {
  active: Boolean
  allowLateSubmissions: Boolean
  courseId: ID!
  description: String
  endDate: String
  id: ID!
  isGroup: Boolean
  link: String
  previewReviewers(input: PreviewReviewersFilterInputType): [ReviewerPreviewType!]!
  reviewers: [ReviewerType!]!
  startDate: String
  submission(id: ID!): SubmissionType
  submissions: [SubmissionType!]!
  title: String
}

type CourseType {
  active: Boolean!

  """Finds an assignment for a specific course"""
  assignment(id: ID!): AssignmentType

  """Active assignments within the course"""
  assignments: [AssignmentType!]!

  """Groups within a course"""
  groups: [InternalGroupType!]!
  id: ID!
  name: String!
  organization: String
  period: Int!
  studentsCount: Int!

  """Subject the course belongs to"""
  subject: SubjectType!
  teachersCount: Int!

  """Teacher user roles within a course"""
  teachersUserRoles: [UserRoleType!]!

  """User roles within a course"""
  userRoles: [UserRoleType!]

  """Viewer groups within the course"""
  viewerGroups: [InternalGroupParticipantType!]!
  viewerRole: RoleType!
  year: Int!
}

type CreateRepositoriesResponse {
  failedRepositoriesNames: [String!]
}

type CreateSubmissionResultType {
  errors: [String!]!
  success: Boolean
}

"""A group participant within TeachHub"""
type InternalGroupParticipantType {
  active: Boolean
  assignmentId: ID!
  group: InternalGroupType!
  groupId: ID!
  id: ID!
  otherParticipants: [UserType!]!
  userRoleId: ID!
}

"""A group within TeachHub"""
type InternalGroupType {
  active: Boolean
  courseId: ID!
  id: ID!
  name: String

  """Users withing a group by assignments"""
  usersByAssignments: [InternalGroupUsersByAssignments!]!
}

"""Users withing a group by assignments"""
type InternalGroupUsersByAssignments {
  assignments: [AssignmentType!]!
  users: [UserType!]!
}

"""Authenticated data"""
type Login {
  token: String
  userRegistered: Boolean
}

"""Logout data"""
type Logout {
  token: String
}

input PreviewReviewersFilterInputType {
  consecutive: Boolean!
  teachersUserIds: [String]!
}

"""Registered user data"""
type RegisterType {
  token: String
}

input RepositoryStudentData {
  groupId: String
  name: String!
  students: [String!]
}

type RepositoryType {
  active: Boolean!
  course: CourseType!
  githubId: String!
  id: ID!
  name: String!
  user: UserType!
}

union RevieweeUnionType = InternalGroupType | UserType

"""Assignment reviewer."""
type ReviewerPreviewType {
  """The id of the reviewer."""
  id: ID!

  """The reviewee user."""
  reviewee: RevieweeUnionType!

  """The id of the reviewer user role."""
  reviewer: UserType!
}

"""Assignment reviewer."""
type ReviewerType {
  """The id of the reviewer."""
  id: ID!

  """The reviewee user."""
  reviewee: RevieweeUnionType!

  """The id of the reviewer user role."""
  reviewer: UserType!
}

input ReviewersAssignmentInputType {
  """The id of the reviewer user."""
  revieweeUserId: ID!

  """The id of the reviewer user."""
  reviewerUserId: ID!
}

type RoleType {
  active: Boolean!
  id: ID!
  isTeacher: Boolean!
  name: String!
  parent: RoleType
  permissions: [String]
}

"""Root mutation"""
type RootMutationType {
  assignReviewers(input: AssignReviewersInputType): [ReviewerType!]!

  """Creates an assignment in a course"""
  createAssignment(active: Boolean, allowLateSubmissions: Boolean, courseId: ID!, description: String, endDate: String, isGroup: Boolean, link: String, startDate: String, title: String): AssignmentType

  """Creates a group and adds a participant to it"""
  createGroupWithParticipant(assignmentId: ID!, courseId: ID!, groupName: String!): InternalGroupParticipantType!

  """Creates repositories"""
  createRepositories(admins: [String!], arePrivate: Boolean, courseId: ID!, maintainers: [String!], names: [String!], organization: String!, repositoriesData: [RepositoryStudentData!]): CreateRepositoriesResponse

  """Creates a new submission for the viewer"""
  createSubmission(assignmentId: ID!, courseId: ID!, description: String, pullRequestUrl: String!): CreateSubmissionResultType

  """Generates an invitation code"""
  generateInviteCode(courseId: ID!, roleId: ID!): String!

  """Joins viewer to a group"""
  joinGroup(assignmentId: ID!, courseId: ID!, groupId: ID!): InternalGroupParticipantType!

  """Login user"""
  login(code: String): Login

  """Logout user"""
  logout(token: String): Logout

  """Creates a user and authorizes it"""
  registerUser(file: String, lastName: String, name: String, notificationEmail: String): RegisterType

  """Sets the github organization of a course"""
  setOrganization(courseId: ID!, organizationName: String!): CourseType

  """Updates an assignment in a course"""
  updateAssignment(active: Boolean, allowLateSubmissions: Boolean, courseId: ID!, description: String, endDate: String, id: ID!, isGroup: Boolean, link: String, startDate: String, title: String): AssignmentType

  """Updates a user"""
  updateUser(file: String, githubId: String, lastName: String, name: String, notificationEmail: String, userId: ID!): UserType

  """Marks an invite as used returning the course id"""
  useInvite(inviteId: ID!): UseInviteResponse!
}

"""Root query"""
type RootQueryType {
  """Logged in user"""
  availableRoles: [RoleType!]!

  """Logged in user"""
  viewer: ViewerType
}

type SubjectType {
  active: Boolean!
  code: String!
  id: ID!
  name: String!
}

type SubmissionType {
  description: String
  id: ID!
  pullRequestUrl: String!

  """Date when submission was created"""
  submittedAt: String!

  """User who has made the submission"""
  user: UserType!
}

type UseInviteResponse {
  courseId: ID
}

"""Pull request object has opened for a course"""
type UserPullRequestType {
  id: String!
  repositoryName: String!
  title: String!
  url: String!
}

type UserRoleType {
  active: Boolean!
  course: CourseType!
  id: ID!
  role: RoleType!
  user: UserType!
}

"""A non-admin user within TeachHub"""
type UserType {
  active: Boolean!
  file: String!
  githubId: String!
  id: ID!
  lastName: String!
  name: String!
  notificationEmail: String!
}

"""Viewer organizations data"""
type ViewerOrganizations {
  names: [String!]!
}

type ViewerType {
  active: Boolean!

  """Get available github organizations for a user"""
  availableOrganizations: ViewerOrganizations!

  """Finds a course for the viewer"""
  course(id: ID!): CourseType
  file: String!
  githubId: String!
  id: String!
  lastName: String!
  name: String!
  notificationEmail: String!
  openPullRequests(courseId: ID!): [UserPullRequestType!]!

  """Look for all the repositories associated to the viewer"""
  repositories(
    """Scope repositories down to this course"""
    courseId: ID
  ): [RepositoryType!]!

  """User user roles"""
  userRoles: [UserRoleType!]!
}
